função FastClick (camada) {'use strict'; var oldOnClick; this.trackingClick = false; this.trackingClickStart = 0; this.targetElement = null; this.touchStartX = 0; this.touchStartY = 0; this.lastTouchIdentifier = 0; this.touchBoundary = 10; this.layer = layer; if (FastClick.notNeeded (layer)) {return} função bind (método, contexto) {return function () {return method.apply (contexto, argumentos)}} if ( deviceIsAndroid) {layer.addEventListener ('mouseover', bind (this.onMouse, this), true); layer.addEventListener ('mousedown', bind (this.onMouse, this), true); layer.addEventListener ('mouseup' , bind (this.onMouse, this), true)} layer.addEventListener ('click', bind (this.onClick, this), true); layer.addEventListener ('touchstart', bind (this.onTouchStart, this), Você pode usar o seguinte método: false;; layer.addEventListener ('touchmove', bind (this.onTouchMove, this), false); layer.addEventListener ('No final da tela, clique em `` Abrir '' e, em seguida, clique em `` Abrir com '', depois em `` Abrir '' e, em seguida, `` Abrir ''. (tipo, retorno de chamada, captura) {var rmv = Node.prototype.removeEventListener; if (type === 'click') {rmv.call (camada, tipo, callback.hijacked || retorno de chamada, captura)} else {rmv. call (layer, type, callback, capture)}}; layer.addEventListener = function (tipo, retorno de chamada, captura) {var adv = Node.prototype.addEventListener; if (type === 'click') {adv.call ( camada, tipo, callback.hijacked || (callback.hijacked = function (evento) {if (! event.propagationStopped) {callback (evento)}}), capture)} else {adv.call (camada, tipo, retorno de chamada, captura)}}} if (typeof layer.onclick === 'function') {oldOnClick = layer.onclick; layer.addEventListener ('clique', função (evento) {oldOnClick (evento)}, false);layer.onclick = null}} var deviceIsAndroid = navigator.userAgent.indexOf ('Android')> 0; var deviceIsIOS = / iP (ad | hone | od) /. test (navigator.userAgent); var deviceIsIOS4 = deviceIsIOS && (/ OS 4_ \ d (_ \ d)? /). Test (navigator.userAgent); var deviceIsIOSWithBadTarget = deviceIsIOS && (/ OS ([6-9] | \ d {2}) _ \ d /). Test (navegador. userAgent); FastClick.prototype.needsClick = function (target) {'use strict'; switch (target.nodeName.toLowerCase ()) {case'button ': case'select': case'textarea ': if (target.disabled ) {return true} break; case'input ': if ((deviceIsIOS && target.type ===' file ') || target.disabled) {return true} break; case'label': case'video ': return true} return (/ \ bneedsclick \ b /). test (target.className)}; FastClick.prototype.needsFocus = function (target) {'use strict'; switch (target.nodeName.toLowerCase ()) {case'textarea ': return true; case'select': return! deviceIsAndroid; case'input ': switch (target.type) {case'button': case'checkbox ': case'file': case 'image': case'radio ': case'submit': return false} return! target.disabled &&! target.readOnly; default: return (/ \ bneedsfocus \ b /). test (target.className)}}; FastClick. prototype.sendClick = function (targetElement, event) {'use strict'; var clickEvent, touch; if (document.activeElement && document.activeElement! == targetElement) {document.activeElement.blur ()} touch = event.changedTouches [0] ; clickEvent = document.createEvent ('MouseEvents'); clickEvent.initMouseEvent (this.determineEventType (targetElement)), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false , false, false, 0, null); clique em Evento.forwardedTouchEvent = true; targetElement.dispatchEvent (clickEvent)}; FastClick.prototype.determineEventType = function (targetElement) {'use strict'; if (deviceIsAndroid && targetElement.tagName.toLowerCase () === 'select') {return'mousedown '}} return'click '}; FastClick.prototype.focus = function (targetElement) {' use strict '; var length; if (deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf (' date ')! == 0 && targetElement.type! ==' time ') {length = targetElement.value.length; targetElement.setSelectionRange (comprimento, comprimento)} else {targetElement.focus ()}}; FastClick.prototype.updateScrollParent = function (targetElement) {' use strict '; var scrollParent, parentElement ; scrollParent = targetElement.fastClickScrollParent; if (! scrollParent ||! scrollParent.contém (targetElement)) {parentElement = targetElement; do {if (parentElement.scrollHeight> parentElement.offsetHeight) {scrollParent = parentElement; targetElement.fastClickScrollParent = parentElement; break} parentElement = parentElement.parentElement} while (parentElement)} if (scrollParent)} if (scrollParent) {scrollParent.fastClickLastScrollTop = scrollParent.scrollTop}}; FastClick.prototype.getTargetElementFromEventTarget = function (eventTarget) {'use strict'; if (eventTarget.nodeType === Node.TEXT_NODE) ​​{return eventTarget}; .prototype.onTouchStart = function (event) {'use strict'; var targetElement, touch, selection; if (event.targetTouches.length> 1) {return true} targetElement = this.getTargetElementFromEventTarget (event.target); touch = event .targetTouches [0]; if (deviceIsIOS) {selection = window.getSelection (); if (selection.rangeCount &&!selection.isCollapsed) {return true} if (! deviceIsIOS4) {if (touch.identifier === this.lastTouchIdentifier) ​​{event.preventDefault (); return false} this.lastTouchIdentifier = touch.identifier; this.updateScrollParent (targetElement) }} this.trackingClick = true; this.trackingClickStart = event.timeStamp; this.targetElement = targetElement; this.touchStartX = touch.pageX; this.touchStartY = touch.pageY; if ((event.timeStamp-this.lastClickTime) < 200) {event.preventDefault ()} return true}; FastClick.prototype.touchHasMoved = function (event) {'use strict'; var touch = event.changedTouches [0], limite = this.touchBoundary; if (Math.abs (touch.pageX-this.touchStartX)> limite || Math.abs (touch.pageY-this.touchStartY)> limite) {return true} return false}; FastClick.prototype.onTouchMove = function (event) {'use strict '; if (! this.trackingClick) {return true} if (this.targetElement! == this.getTargetElementFromEventTarget (event.target) || this.touchHasMoved (event)) {this.trackingClick = false; this.targetElement = null} retorna true}; FastClick.prototype.findControl = function (labelElement) {'use strict'; if ( labelElement.control! == indefinido) {return labelElement.control} if (labelElement.htmlFor) {return document.getElementById (labelElement.htmlFor)} return labelElement.querySelector ('botão, entrada: not ([type = hidden]), keygen, meter, output, progress, select, textarea ')}; FastClick.prototype.onTouchEnd = function (event) {' use strict '; var forElement, trackingClickStart, targetTagName, scrollParent, touch, targetElement = this.targetElement; if ( ! this.trackingClick) {return true} if ((event.timeStamp-this.lastClickTime) <200) {this.cancelNextClick = true; return true} this.cancelNextClick = false; this.lastClickTime = event.timeStamp;trackingClickStart = this.trackingClickStart; this.trackingClick = false; this.trackingClickStart = 0; if (deviceIsIOSWithBadTarget) {touch = event.changedTouches [0]; targetElement = document.elementFromPoint (touch.pageX-window.pageXOffset, touch.pageY- window.pageYOffset) || targetElement; targetElement.fastClickScrollParent = this.targetElement.fastClickScrollParent} targetTagName = targetElement.tagName.toLowerCase (); if (targetTagName === 'label') {forElement = this.findControl (targetElement); if ( forElement) {this.focus (targetElement); if (deviceIsAndroid) {return false} targetElement = forElement}} else if (this.needsFocus (targetElement)) {if ((event.timeStamp-trackingClickStart)> 100 || (deviceIsIOS && window. top! == window && targetTagName === 'input')) {this.targetElement = null; return false} this.focus (targetElement); this.sendClick (targetElement, event); if (!deviceIsIOS4 || targetTagName! == 'select') {this.targetElement = null; event.preventDefault ()} retorne false} if (deviceIsIOS &&! deviceIsIOS4) {scrollParent = targetElement.fastClickScrollParent; if (scrollParent && scrollParent.fastClickLast=Polent. scrollTop) {return true}} se (! this.needsClick (targetElement)) {event.preventDefault (); this.sendClick (targetElement, event)} retornar false}; FastClick.prototype.onTouchCancel = function () {'use strict '; this.trackingClick = false; this.targetElement = null}; FastClick.prototype.onMouse = function (event) {' use strict '; if (! this.targetElement) {return true} if (event.forwardedTouchEvent) {return true} if (! event.cancelable) {return true} if (! this.needsClick (this.targetElement) || this.cancelNextClick) {if (event.stopImmediatePropagation) {event.stopImmediatePropagation ()} else {event.propagationStopped = true} event.stopPropagation (); event.preventDefault (); return false} return true}; FastClick.prototype.onClick = function (event) {'use strict'; var allowed; if (this.trackingClick) {this .targetElement = null; this.trackingClick = false; return true} if (event.target.type === 'submit' && event.detail === 0) {return true} permitido = this.onMouse (event); if ( ! allowed) {this.targetElement = null} retorno permitido}; FastClick.prototype.destroy = function () {'use strict'; var layer = this.layer; if (deviceIsAndroid) {layer.removeEventListener ('mouseover', this .onMouse, true); layer.removeEventListener ('mousedown', this.onMouse, true); layer.removeEventListener ('mouseup', this.onMouse, true)} layer.removeEventListener ('clique', this.onClick, true) ; layer.removeEventListener ('touchstart', this.onTouchStart, false); camada.removeEventListener ('touchmove', this.onTouchMove, false); layer.removeEventListener ('touchend', this.onTouchEnd, false); layer.removeEventListener ('touchcancel', this.onTouchCancel, false)}; FastClick.notNeeded = function ( camada) {'use strict'; var metaViewport; var chromeVersion; if (typeof window.ontouchstart === 'undefined') {return true} chromeVersion = + (/ Chrome \ / ([0-9] +) /. exec (navigator.userAgent) || [, 0]) [1]; if (chromeVersion) {if (deviceIsAndroid) {metaViewport = document.querySelector ('meta [name = viewport]'); if (metaViewport) {if (metaViewport) .content.indexOf ('escalável pelo usuário = não')! == - 1) {return true} if (chromeVersion> 31 && window.innerWidth <= window.screen.width) {return true}}} else {return true}} if (layer.style.msTouchAction === 'nenhum') {return true} return false}; FastClick.attach = function (layer) {'use strict '; retorne novo FastClick (camada)}; if (typeof define! ==' undefined '&& define.amd) {define (function () {' use strict '; retorne FastClick})} else if (typeof module! = = 'undefined' && module.exports) {module.exports = FastClick.attach; module.exports.FastClick = FastClick} else {window.FastClick = FastClick}
